#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‰ºöÁ§æÂêçÊ§úÁ¥¢Ê©üËÉΩ
Êó•Êú¨„ÅÆ‰∏äÂ†¥‰ºÅÊ•≠„ÅÆÈäòÊüÑ„Ç≥„Éº„Éâ„Å®‰ºöÁ§æÂêç„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„ÇíÁÆ°ÁêÜ
"""

import json
import os
from typing import List, Dict, Optional, Tuple
from difflib import SequenceMatcher

class CompanySearch:
    """‰ºöÁ§æÂêçÊ§úÁ¥¢„ÇØ„É©„Çπ"""
    
    def __init__(self, data_file: str = None):
        """
        ÂàùÊúüÂåñ
        
        Args:
            data_file (str): ‰ºöÁ§æ„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ
        """
        if data_file is None:
            # ÁèæÂú®„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂü∫Ê∫ñ„Å´„Éë„Çπ„ÇíË®≠ÂÆö
            current_dir = os.path.dirname(os.path.abspath(__file__))
            self.data_file = os.path.join(current_dir, "company_data.json")
            
            # Streamlit CloudÁí∞Â¢É„Åß„ÅÆ‰ª£Êõø„Éë„Çπ
            if not os.path.exists(self.data_file):
                # Streamlit CloudÁî®„ÅÆ‰ª£Êõø„Éë„Çπ
                alt_paths = [
                    os.path.join('/app/src/core', "company_data.json"),
                    os.path.join(os.getcwd(), 'src', 'core', "company_data.json"),
                    os.path.join(os.getcwd(), "company_data.json")
                ]
                for alt_path in alt_paths:
                    if os.path.exists(alt_path):
                        self.data_file = alt_path
                        break
        else:
            self.data_file = data_file
        self.companies = self._load_company_data()
    
    def _load_company_data(self) -> List[Dict]:
        """‰ºöÁ§æ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø"""
        try:
            print(f"üîç ‰ºöÁ§æ„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø‰∏≠: {self.data_file}")
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    companies = data.get('companies', [])
                    print(f"‚úÖ ‰ºöÁ§æ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü: {len(companies)}Á§æ")
                    return companies
            else:
                print(f"‚ö†Ô∏è ‰ºöÁ§æ„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {self.data_file}")
                return []
        except Exception as e:
            print(f"‚ùå ‰ºöÁ§æ„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó: {e}")
            return []

    def _save_company_data(self) -> None:
        """‰ºöÁ§æ„Éá„Éº„Çø„Çí‰øùÂ≠òÔºàÂãïÁöÑÊã°Âºµ„ÇíÊ∞∏Á∂öÂåñÔºâ"""
        try:
            data = {"companies": self.companies}
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            # ‰øùÂ≠òÂ§±Êïó„ÅØËá¥ÂëΩÁöÑ„Åß„ÅØ„Å™„ÅÑ„Åü„ÇÅË≠¶Âëä„ÅÆ„Åø
            print(f"‚ö†Ô∏è ‰ºöÁ§æ„Éá„Éº„Çø„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó: {e}")

    def _fetch_company_from_remote(self, code: str) -> Optional[Dict]:
        """Â§ñÈÉ®„Åã„Çâ‰ºöÁ§æÊÉÖÂ†±„ÇíÂèñÂæóÔºàyfinanceÔºâ„Åó„ÄÅËæûÊõ∏ÂΩ¢Âºè„ÅßËøî„Åô„ÄÇ

        Returns None if not found or on error.
        """
        try:
            import yfinance as yf  # lazy import
        except Exception:
            return None

        try:
            ticker = yf.Ticker(f"{code}.T")
            name = None
            sector = None
            market = "Êù±Ë®º"

            # yfinance„ÅÆÊÉÖÂ†±ÂèñÂæó„ÅØÁí∞Â¢É„Å´„Çà„Å£„Å¶Â∑Æ„Åå„ÅÇ„Çã„Åü„ÇÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂ§öÊÆµ
            try:
                info = getattr(ticker, 'info', {}) or {}
                name = info.get('shortName') or info.get('longName')
                sector = info.get('sector')
            except Exception:
                info = {}

            if not name:
                try:
                    fast = getattr(ticker, 'fast_info', None)
                    if fast:
                        name = fast.get('shortName') or name
                except Exception:
                    pass

            if not name:
                # ÂêçÂâç„ÅåÂèñ„Çå„Å™„Åè„Å¶„ÇÇ„Ç≥„Éº„Éâ„Å†„Åë„ÅßÁôªÈå≤ÂèØËÉΩ„Å´„Åô„Çã
                name = f"ÈäòÊüÑ{code}"
            if not sector:
                sector = "‰∏çÊòé"

            return {
                'code': code,
                'name': name,
                'sector': sector,
                'market': market
            }
        except Exception:
            return None

    def _add_or_update_company(self, company: Dict) -> Dict:
        """Á§æÂÜÖ„É™„Çπ„Éà„Å∏ËøΩÂä†ÔºàÊó¢Â≠ò„Å™„ÇâÊõ¥Êñ∞Ôºâ„Åó„ÄÅ‰øùÂ≠ò„Åô„Çã"""
        # Êó¢Â≠ò„ÉÅ„Çß„ÉÉ„ÇØ
        for i, c in enumerate(self.companies):
            if c.get('code') == company.get('code'):
                # Êó¢Â≠ò„Çí„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÔºàÊ¨†Êêç„ÅÆ„ÅøË£úÂÆåÔºâ
                updated = {
                    'code': c.get('code', company.get('code')),
                    'name': c.get('name', company.get('name')),
                    'sector': c.get('sector', company.get('sector', '‰∏çÊòé')),
                    'market': c.get('market', company.get('market', 'Êù±Ë®º')),
                }
                self.companies[i] = updated
                self._save_company_data()
                return updated

        # Êñ∞Ë¶èËøΩÂä†
        self.companies.append(company)
        self._save_company_data()
        return company
    
    def search_by_name(self, query: str, limit: int = 10) -> List[Dict]:
        """
        ‰ºöÁ§æÂêç„ÅßÊ§úÁ¥¢
        
        Args:
            query (str): Ê§úÁ¥¢„ÇØ„Ç®„É™
            limit (int): ÁµêÊûú„ÅÆÊúÄÂ§ß‰ª∂Êï∞
            
        Returns:
            List[Dict]: Ê§úÁ¥¢ÁµêÊûú
        """
        if not query.strip():
            return []
        
        query = query.strip().lower()
        results = []
        
        for company in self.companies:
            name = company['name'].lower()
            code = company['code']
            sector = company['sector']
            
            # ÂÆåÂÖ®‰∏ÄËá¥
            if query == name:
                results.append({
                    'company': company,
                    'score': 1.0,
                    'match_type': 'ÂÆåÂÖ®‰∏ÄËá¥'
                })
            # ÈÉ®ÂàÜ‰∏ÄËá¥
            elif query in name:
                score = len(query) / len(name)
                results.append({
                    'company': company,
                    'score': score,
                    'match_type': 'ÈÉ®ÂàÜ‰∏ÄËá¥'
                })
            # È°û‰ººÂ∫¶Ê§úÁ¥¢
            else:
                similarity = SequenceMatcher(None, query, name).ratio()
                if similarity > 0.3:  # È°û‰ººÂ∫¶30%‰ª•‰∏ä
                    results.append({
                        'company': company,
                        'score': similarity,
                        'match_type': 'È°û‰ººÊ§úÁ¥¢'
                    })
        
        # „Çπ„Ç≥„Ç¢„Åß„ÇΩ„Éº„ÉàÔºàÈôçÈ†ÜÔºâ
        results.sort(key=lambda x: x['score'], reverse=True)
        
        return results[:limit]
    
    def search_by_code(self, code: str) -> Optional[Dict]:
        """
        ÈäòÊüÑ„Ç≥„Éº„Éâ„ÅßÊ§úÁ¥¢
        
        Args:
            code (str): ÈäòÊüÑ„Ç≥„Éº„Éâ
            
        Returns:
            Optional[Dict]: ‰ºöÁ§æÊÉÖÂ†±ÔºàË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØNoneÔºâ
        """
        code = code.strip()
        for company in self.companies:
            if company['code'] == code:
                return company

        # Êú™ÁôªÈå≤„ÅÆÂ†¥Âêà„Åß„ÇÇ„ÄÅ4Ê°Å„ÅÆÊó•Êú¨Ê†™„Ç≥„Éº„Éâ„ÅØÂãïÁöÑ„Å´Ëß£Ê±∫„ÇíË©¶„Åø„Çã
        if code.isdigit() and len(code) == 4:
            remote = self._fetch_company_from_remote(code)
            if remote:
                return self._add_or_update_company(remote)
            # „É™„É¢„Éº„ÉàÂèñÂæó„Å´Â§±Êïó„Åó„Å¶„ÇÇ„Çπ„Çø„Éñ„ÇíÁôªÈå≤„Åó„Å¶ÂàÜÊûê„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
            stub = {
                'code': code,
                'name': f"ÈäòÊüÑ{code}",
                'sector': '‰∏çÊòé',
                'market': 'Êù±Ë®º'
            }
            return self._add_or_update_company(stub)

        return None
    
    def search_by_sector(self, sector: str, limit: int = 20) -> List[Dict]:
        """
        Ê•≠Á®Æ„ÅßÊ§úÁ¥¢
        
        Args:
            sector (str): Ê•≠Á®ÆÂêç
            limit (int): ÁµêÊûú„ÅÆÊúÄÂ§ß‰ª∂Êï∞
            
        Returns:
            List[Dict]: Ê§úÁ¥¢ÁµêÊûú
        """
        sector = sector.strip().lower()
        results = []
        
        for company in self.companies:
            if sector in company['sector'].lower():
                results.append(company)
        
        return results[:limit]
    
    def get_all_sectors(self) -> List[str]:
        """
        ÂÖ®Ê•≠Á®Æ„ÇíÂèñÂæó
        
        Returns:
            List[str]: Ê•≠Á®Æ„É™„Çπ„Éà
        """
        sectors = set()
        for company in self.companies:
            sectors.add(company['sector'])
        return sorted(list(sectors))
    
    def get_popular_companies(self, limit: int = 20) -> List[Dict]:
        """
        ‰∫∫Ê∞ó‰ºÅÊ•≠Ôºà‰∏ªË¶Å‰ºÅÊ•≠Ôºâ„ÇíÂèñÂæó
        
        Args:
            limit (int): ÁµêÊûú„ÅÆÊúÄÂ§ß‰ª∂Êï∞
            
        Returns:
            List[Dict]: ‰∏ªË¶Å‰ºÅÊ•≠„É™„Çπ„Éà
        """
        # ‰∏ªË¶Å‰ºÅÊ•≠„ÅÆÈäòÊüÑ„Ç≥„Éº„Éâ„É™„Çπ„Éà
        popular_codes = [
            "7203", "6758", "9984", "6861", "9434", "4784", "7974", "6954",
            "6594", "7733", "4901", "4502", "4519", "3382", "8267", "8306",
            "8316", "8411", "9020", "9021", "9022", "9432", "9433", "9501",
            "9502", "9503", "8031", "8058", "8001", "8002", "2768", "7267",
            "7269", "7270", "4568", "4151", "6952", "6501", "6502", "6503",
            "6752", "6753", "6762", "6988", "7013", "7012", "7004", "7011",
            "3407", "3402", "3401", "3405", "4911", "2501", "2502", "2503",
            "2531", "1332", "1333", "2001", "2002", "1801", "1802", "1803",
            "1812", "1925", "1928", "8801", "8802", "8804", "8830", "9101",
            "9104", "9107", "9201", "9202", "9531", "9532", "9533", "9602",
            "9681", "9735", "9744", "9766", "9769", "9787", "9793", "9843",
            "9850", "9861", "9873", "9889", "9896", "9900", "9902", "9904",
            "9909", "9913", "9914", "9919", "9927", "9928", "9929", "9930",
            "9932", "9934", "9936", "9941", "9942", "9943", "9945", "9946",
            "9948", "9949", "9950", "9955", "9956", "9957", "9959", "9960",
            "9962", "9964", "9966", "9967", "9969", "9972", "9973", "9974",
            "9976", "9977", "9978", "9979", "9980", "9981", "9982", "9983",
            "9986", "9987", "9989", "9990", "9991", "9992", "9993", "9994",
            "9995", "9996", "9997", "9998", "9999"
        ]
        
        popular_companies = []
        for code in popular_codes[:limit]:
            company = self.search_by_code(code)
            if company:
                popular_companies.append(company)
        
        return popular_companies
    
    def display_search_results(self, results: List[Dict]) -> None:
        """
        Ê§úÁ¥¢ÁµêÊûú„ÇíË°®Á§∫
        
        Args:
            results (List[Dict]): Ê§úÁ¥¢ÁµêÊûú
        """
        if not results:
            print("‚ùå Ê§úÁ¥¢ÁµêÊûú„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            return
        
        print(f"\nüìä Ê§úÁ¥¢ÁµêÊûú: {len(results)}‰ª∂")
        print("-" * 80)
        
        for i, result in enumerate(results, 1):
            company = result['company']
            score = result['score']
            match_type = result['match_type']
            
            print(f"{i:2d}. {company['name']} ({company['code']})")
            print(f"    Ê•≠Á®Æ: {company['sector']} | Â∏ÇÂ†¥: {company['market']}")
            print(f"    „Éû„ÉÉ„ÉÅÂ∫¶: {score:.1%} ({match_type})")
            print()
    
    def display_company_info(self, company: Dict) -> None:
        """
        ‰ºöÁ§æÊÉÖÂ†±„ÇíË°®Á§∫
        
        Args:
            company (Dict): ‰ºöÁ§æÊÉÖÂ†±
        """
        print(f"\nüè¢ {company['name']} ({company['code']})")
        print(f"   Ê•≠Á®Æ: {company['sector']}")
        print(f"   Â∏ÇÂ†¥: {company['market']}")
    
    def interactive_search(self) -> Optional[str]:
        """
        ÂØæË©±ÁöÑ„Å™Ê§úÁ¥¢
        
        Returns:
            Optional[str]: ÈÅ∏Êäû„Åï„Çå„ÅüÈäòÊüÑ„Ç≥„Éº„ÉâÔºà„Ç≠„É£„É≥„Çª„É´„ÅÆÂ†¥Âêà„ÅØNoneÔºâ
        """
        print("\nüîç ‰ºöÁ§æÂêç„ÅßÊ§úÁ¥¢")
        print("‰ºöÁ§æÂêç„ÅÆ‰∏ÄÈÉ®„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æã: „Éà„É®„Çø„ÄÅ„ÇΩ„Éã„Éº„ÄÅ‰ªªÂ§©Â†ÇÔºâ:")
        
        query = input("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ: ").strip()
        if not query:
            return None
        
        results = self.search_by_name(query, limit=15)
        
        if not results:
            print(f"‚ùå '{query}' „Å´‰∏ÄËá¥„Åô„Çã‰ºöÁ§æ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            return None
        
        self.display_search_results(results)
        
        if len(results) == 1:
            # 1‰ª∂„ÅÆ„Åø„ÅÆÂ†¥Âêà„ÅØËá™ÂãïÈÅ∏Êäû
            selected_company = results[0]['company']
            self.display_company_info(selected_company)
            confirm = input("„Åì„ÅÆ‰ºöÁ§æ„ÇíÈÅ∏Êäû„Åó„Åæ„Åô„ÅãÔºü (Y/n): ").strip().lower()
            if confirm in ['', 'y', 'yes']:
                return selected_company['code']
            else:
                return None
        else:
            # Ë§áÊï∞‰ª∂„ÅÆÂ†¥Âêà„ÅØÈÅ∏Êäû
            while True:
                try:
                    choice = input(f"\nÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (1-{len(results)}): ").strip()
                    if choice.lower() in ['q', 'quit', 'cancel', '„Ç≠„É£„É≥„Çª„É´']:
                        return None
                    
                    choice_num = int(choice)
                    if 1 <= choice_num <= len(results):
                        selected_company = results[choice_num - 1]['company']
                        self.display_company_info(selected_company)
                        return selected_company['code']
                    else:
                        print(f"‚ùå 1-{len(results)}„ÅÆÊï∞Â≠ó„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                except ValueError:
                    print("‚ùå ÊúâÂäπ„Å™Êï∞Â≠ó„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                except KeyboardInterrupt:
                    print("\n‚ùå Ê§úÁ¥¢„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü")
                    return None


def main():
    """„ÉÜ„Çπ„ÉàÁî®„É°„Ç§„É≥Èñ¢Êï∞"""
    searcher = CompanySearch()
    
    print("=== ‰ºöÁ§æÂêçÊ§úÁ¥¢„Ç∑„Çπ„ÉÜ„É† ===")
    print(f"ÁôªÈå≤‰ºÅÊ•≠Êï∞: {len(searcher.companies)}Á§æ")
    
    # Ê•≠Á®Æ‰∏ÄË¶ß„ÇíË°®Á§∫
    sectors = searcher.get_all_sectors()
    print(f"\nüìã ÂØæÂøúÊ•≠Á®Æ: {len(sectors)}Ê•≠Á®Æ")
    for sector in sectors:
        print(f"   - {sector}")
    
    # ‰∫∫Ê∞ó‰ºÅÊ•≠„ÇíË°®Á§∫
    popular = searcher.get_popular_companies(10)
    print(f"\n‚≠ê ‰∏ªË¶Å‰ºÅÊ•≠ (‰∏ä‰Ωç10Á§æ):")
    for i, company in enumerate(popular, 1):
        print(f"   {i:2d}. {company['name']} ({company['code']}) - {company['sector']}")
    
    # ÂØæË©±ÁöÑÊ§úÁ¥¢
    selected_code = searcher.interactive_search()
    if selected_code:
        print(f"\n‚úÖ ÈÅ∏Êäû„Åï„Çå„ÅüÈäòÊüÑ„Ç≥„Éº„Éâ: {selected_code}")
    else:
        print("\n‚ùå Ê§úÁ¥¢„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü")


if __name__ == "__main__":
    main() 